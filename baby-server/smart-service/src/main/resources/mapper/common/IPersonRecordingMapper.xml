<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.smart.dao.IPersonRecordingMapper">

    <select id="queryPersonRecordingList" resultType="cn.smart.bo.RecordingBO" parameterType="cn.smart.condition.PersonRecordingQueryCondition">
        select pr.`person_id`, pr.`room_id`, pr.`recording_id`,
                pr.`create_date`, pr.`course_id`,
                r.record_path, r.play_path, r.https_play_path
        from person_recording pr
        left join recording r on r.id = pr.recording_id
        <where>
            <if test="personId != null">
                and pr.`person_id` = #{personId,jdbcType=BIGINT}
            </if>
            <if test="roomId != null">
                and pr.`room_id` = #{roomId,jdbcType=BIGINT}
            </if>
            <if test="recordingId != null">
                and pr.`recording_id` = #{recordingId,jdbcType=BIGINT}
            </if>
            <if test="createDate != null">
                and pr.`create_date` = #{createDate,jdbcType=DATE}
            </if>
            <if test="courseId != null">
                and pr.`course_id` = #{courseId,jdbcType=BIGINT}
            </if>
        </where>
        <choose>
            <when test="orderField != null and orderField.trim() != ''">
                order by ${orderField} ${order}
            </when>
            <otherwise>
                order by pr.id desc
            </otherwise>
        </choose>
        <if test="offset != null and offset >= 0 and limit != null and limit gt 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="cn.smart.entity.PersonRecordingDO">
        insert into person_recording
        (
       	    `id`, `person_id`, `room_id`, `recording_id`, 
       	    `create_date`, `create_time`, `course_id`
        )
        values
        (
       	    #{id,jdbcType=BIGINT}, #{personId,jdbcType=BIGINT}, #{roomId,jdbcType=BIGINT}, #{recordingId,jdbcType=BIGINT}, 
       	    #{createDate,jdbcType=DATE}, #{createTime,jdbcType=TIMESTAMP}, #{courseId,jdbcType=BIGINT}
        )
    </insert>

    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="cn.smart.entity.PersonRecordingDO">
        insert into person_recording
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="personId != null">
                `person_id`,
            </if>
            <if test="roomId != null">
                `room_id`,
            </if>
            <if test="recordingId != null">
                `recording_id`,
            </if>
            <if test="createDate != null">
                `create_date`,
            </if>
            <if test="createTime != null">
                `create_time`,
            </if>
            <if test="courseId != null">
                `course_id`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT}, 
            </if>
            <if test="personId != null">
                #{personId,jdbcType=BIGINT}, 
            </if>
            <if test="roomId != null">
                #{roomId,jdbcType=BIGINT}, 
            </if>
            <if test="recordingId != null">
                #{recordingId,jdbcType=BIGINT}, 
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=DATE}, 
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP}, 
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=BIGINT}
            </if>
        </trim>
    </insert>

    <insert id="saveBatch" parameterType="List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO person_recording
        (
            `id`, `person_id`, `room_id`, `recording_id`, 
            `create_date`, `create_time`, `course_id`
        )
        VALUES
        <foreach collection="list" item="item" index="index" open="" separator="," close="">
            (
            #{item.id,jdbcType=BIGINT}, #{item.personId,jdbcType=BIGINT}, #{item.roomId,jdbcType=BIGINT}, #{item.recordingId,jdbcType=BIGINT}, 
            #{item.createDate,jdbcType=DATE}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.courseId,jdbcType=BIGINT}
            )
        </foreach>
    </insert>


    <select id="queryById" parameterType="Long" resultType="cn.smart.entity.PersonRecordingDO">
        select
                `id`, `person_id`, `room_id`, `recording_id`, 
                `create_date`, `create_time`, `course_id`
        from person_recording
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="queryList" resultType="cn.smart.entity.PersonRecordingDO"
        parameterType="cn.smart.condition.PersonRecordingQueryCondition">
        select
       	    `id`, `person_id`, `room_id`, `recording_id`, 
       	    `create_date`, `create_time`, `course_id`
        from person_recording
        <where>
            <if test="id != null">
                and `id` = #{id,jdbcType=BIGINT}
            </if>
            <if test="personId != null">
                and `person_id` = #{personId,jdbcType=BIGINT}
            </if>
            <if test="roomId != null">
                and `room_id` = #{roomId,jdbcType=BIGINT}
            </if>
            <if test="recordingId != null">
                and `recording_id` = #{recordingId,jdbcType=BIGINT}
            </if>
            <if test="createDate != null">
                and `create_date` = #{createDate,jdbcType=DATE}
            </if>
            <if test="createTime != null">
                and `create_time` = #{createTime,jdbcType=TIMESTAMP}
            </if>
            <if test="courseId != null">
                and `course_id` = #{courseId,jdbcType=BIGINT}
            </if>
        </where>
        <choose>
            <when test="orderField != null and orderField.trim() != ''">
                order by ${orderField} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset != null and offset >= 0 and limit != null and limit gt 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryTotal" resultType="int"
        parameterType="cn.smart.condition.PersonRecordingQueryCondition">
        select count(1) as total from person_recording
        <where>
            <if test="id != null">
                and `id` = #{id,jdbcType=BIGINT}
            </if>
            <if test="personId != null">
                and `person_id` = #{personId,jdbcType=BIGINT}
            </if>
            <if test="roomId != null">
                and `room_id` = #{roomId,jdbcType=BIGINT}
            </if>
            <if test="recordingId != null">
                and `recording_id` = #{recordingId,jdbcType=BIGINT}
            </if>
            <if test="courseId != null">
                and `course_id` = #{courseId,jdbcType=BIGINT}
            </if>
        </where>
    </select>

    <select id="total" resultType="int">
        select count(1) as total from person_recording
    </select>

    <update id="update" parameterType="cn.smart.entity.PersonRecordingDO">
        update person_recording
        <set>
            <if test="personId != null">
                `person_id` = #{personId,jdbcType=BIGINT},
            </if>
            <if test="roomId != null">
                `room_id` = #{roomId,jdbcType=BIGINT},
            </if>
            <if test="recordingId != null">
                `recording_id` = #{recordingId,jdbcType=BIGINT},
            </if>
            <if test="courseId != null">
                `course_id` = #{courseId,jdbcType=BIGINT}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateAll" parameterType="cn.smart.entity.PersonRecordingDO">
        update person_recording SET
            `person_id` = #{personId,jdbcType=BIGINT},
            `room_id` = #{roomId,jdbcType=BIGINT},
            `recording_id` = #{recordingId,jdbcType=BIGINT},
            `course_id` = #{courseId,jdbcType=BIGINT}
        where `id` = #{id,jdbcType=BIGINT}
    </update>

    <delete id="delete">
        delete from person_recording
        <where>
            <if test="id != null">
                and `id` = #{id,jdbcType=BIGINT}
            </if>
            <if test="personId != null">
                and `person_id` = #{personId,jdbcType=BIGINT}
            </if>
            <if test="roomId != null">
                and `room_id` = #{roomId,jdbcType=BIGINT}
            </if>
            <if test="recordingId != null">
                and `recording_id` = #{recordingId,jdbcType=BIGINT}
            </if>
            <if test="createDate != null">
                and `create_date` = #{createDate,jdbcType=DATE}
            </if>
            <if test="courseId != null">
                and `course_id` = #{courseId,jdbcType=BIGINT}
            </if>
        </where>
    </delete>

    <delete id="deleteBatch">
        delete from person_recording where id in
        <foreach item="ids" collection="array" open="(" separator="," close=")">
        #{ids}
        </foreach>
    </delete>


    <delete id="deleteById" parameterType="Long">
        delete from person_recording where id = #{id,jdbcType=BIGINT}
    </delete>
</mapper>